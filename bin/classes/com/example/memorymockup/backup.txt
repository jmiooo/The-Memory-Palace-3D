package com.example.memorymockup;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.opengl.GLUtils;
import android.opengl.Matrix;
import android.os.SystemClock;
import android.util.Log;


// OPENGL POSITIVE Z AXIS COMES OUT OF THE SCREEN
public class DrawUtility {
	
	public static int loadTexture(final Context context, final int resourceId)
	{
	    final int[] textureHandle = new int[1];
	 
	    GLES20.glGenTextures(1, textureHandle, 0);
	 
	    if (textureHandle[0] != 0)
	    {
	        final BitmapFactory.Options options = new BitmapFactory.Options();
	        //options.inScaled = false;   // No pre-scaling
	 
	        // Read in the resource
	        final Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), resourceId, options);
	 
	        // Bind to the texture in OpenGL
	        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureHandle[0]);
	 
	        // Set filtering
	        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);
	        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);
	 
	        // Load the bitmap into the bound texture.
	        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bitmap, 0);
	 
	        // Recycle the bitmap, since its data has been loaded into OpenGL.
	        bitmap.recycle();
	    }
	 
	    if (textureHandle[0] == 0)
	    {
	        throw new RuntimeException("Error loading texture.");
	    }
	 
	    return textureHandle[0];
	}
	
	
	public static class MyGLRenderer implements GLSurfaceView.Renderer {
		
		//public List<Shape> currentShapes = new ArrayList<Shape> ();
		
		public static float ROOM_SIZE = 2f;

		public MainActivity mainActivity;
		
		private Shape[] roomSprites;
		private Shape[] nextRoomSprites;
		private Shape[] doorSprites;
		
		// Position and velocity for camera
		public float[] position;
		public float[] velocity;
		
		private float currentTime;
		private float lastFrameTime;
		
		private final float[] mMVPMatrix = new float[16];
		private final float[] mProjectionMatrix = new float[16];
		private final float[] mViewMatrix = new float[16];
		
		private final float[] mTotalMatrix = new float[16];
		private final float[] mTransformMatrix = new float[16];
		
		/** Store our model data in a float buffer. */
		//private final FloatBuffer mCubeTextureCoordinates;
		 
		/** This will be used to pass in the texture. */
		private int mTextureUniformHandle;
		 
		/** This will be used to pass in model texture coordinate information. */
		private int mTextureCoordinateHandle;
		 
		/** Size of the texture coordinate data in elements. */
		private final int mTextureCoordinateDataSize = 2;
		 
		/** This is a handle to our texture data. */
		private int mTextureDataHandle;

		public void onSurfaceCreated(GL10 unused, EGLConfig config) {
	        // Set the background frame color
	        GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	        
	        //Initialize assets for drawing rooms
	        roomSprites = new Shape [] {new Quadrangle( new float[] {
				-1f, -1f, -1f,
				-1f, -1f, 1f,
				1f, -1f, 1f,
				1f, -1f, -1f
	        })};
	        doorSprites = new Shape [] {
	        	new Quadrangle( new float[] {
					-1f, 1f, -0.25f,
					-1f, -1f, -0.25f,
					-1f, -1f, 0.25f,
					-1f, 1f, 0.25f
		        }),
		        new Quadrangle( new float[] {
						-0.5f, 1f, 1f,
						-0.5f, -1f, 1f,
						0.5f, -1f, 1f,
						0.5f, 1f, 1f
			    }),
			    new Quadrangle( new float[] {
						1f, 1f, 0.25f,
						1f, -1f, 0.25f,
						1f, -1f, -0.25f,
						1f, 1f, -0.25f
			    }),
			    new Quadrangle( new float[] {
			    		0.5f, 1f, -1f,
						0.5f, -1f, -1f,
						-0.5f, -1f, -1f,
						-0.5f, 1f, -1f
			    })};
	        for (int i = 0; i < doorSprites.length; i++)
	        	doorSprites[i].color = new float [] { 0.8f, 0.7f, 0.55f, 1.0f };
	        
	        velocity = new float [] { 0, 0, 0 };
	        position = new float [] { 0, 0, 0 };
	        
	        lastFrameTime = ((float) SystemClock.uptimeMillis() / 1000);
	    }

	    public void onDrawFrame(GL10 unused) {
	    	//Log.e("e", Float.toString(velocity[0]));
	    	
	    	// Get time passed since last frame
	    	currentTime = ((float) SystemClock.uptimeMillis() / 1000);
	    	float deltaTime = currentTime - lastFrameTime;
	    	lastFrameTime = currentTime;
	    	
	        // Redraw background color
	        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
	        
	        // Set the camera position (View matrix)
	        position = new float [] { position[0] + velocity[0] * deltaTime,
	        						  position[1] + velocity[1] * deltaTime,
	        						  position[2] + velocity[2] * deltaTime };
	        
	        if (Math.abs(position[0]) >= 2 || Math.abs(position[2]) >= 2)
	        {
	        	position = new float [] { 0, 0, 0 };
	        	velocity = new float [] { 0, 0, 0 };
	        	mainActivity.inBlur = false;
	        	
	        }
	        
	        //Log.e("e", Float.toString(position[0]));
	        //Log.e("e", Float.toString(z));
	        Matrix.setLookAtM(mViewMatrix, 0,
	        				  position[0], position[1], position[2] + 1,
	        				  position[0], position[1], position[2],
	        				  0f, 1.0f, 0.0f);

	        // Calculate the projection and view transformation
	        Matrix.multiplyMM(mMVPMatrix, 0, mProjectionMatrix, 0, mViewMatrix, 0);
	        
	        //Log.e("eee", Integer.toString(currentShapes.size()));
	        for (int i = 0; i < roomSprites.length; i++)
	        	roomSprites[i].draw(mMVPMatrix);
	        
	        
	        for (int i = 0; i < doorSprites.length; i++)
	        	doorSprites[i].draw(mMVPMatrix);
	        
	        if (mainActivity.inBlur) {
		        // Calculate the projection and view transformation
	        	Matrix.setIdentityM(mTransformMatrix, 0);
	        	
	        	int previousMove = mainActivity.memoryView.previousMove;
	        	switch(previousMove) {
	        		case 0:
	        			Matrix.translateM(mTransformMatrix, 0, -2, 0, 0);
	        			break;
	        		case 1:
	        			Matrix.translateM(mTransformMatrix, 0, 0, 0, -2);
	        			break;
	        		case 2:
	        			Matrix.translateM(mTransformMatrix, 0, 2, 0, 0);
	        			break;
	        		case 3:
	        			Matrix.translateM(mTransformMatrix, 0, 0, 0, 2);
	        			break;
	        	}
		        Matrix.multiplyMM(mMVPMatrix, 0, mProjectionMatrix, 0, mViewMatrix, 0);
		        Matrix.multiplyMM(mTotalMatrix, 0, mMVPMatrix, 0, mTransformMatrix, 0);
		        
		        for (int i = 0; i < roomSprites.length; i++)
		        	roomSprites[i].draw(mTotalMatrix);
		        
		        for (int i = 0; i < doorSprites.length; i++)
		        	doorSprites[i].draw(mTotalMatrix);
	        }
	    }

	    public void onSurfaceChanged(GL10 unused, int width, int height) {
	    	GLES20.glViewport(0, 0, width, height);

    	    float ratio = (float) width / height;

    	    // this projection matrix is applied to object coordinates
    	    // in the onDrawFrame() method
    	    Matrix.frustumM(mProjectionMatrix, 0, -ratio, ratio, -1, 1, 0.5f, 7);
	    }
	    
	    public static int loadShader(int type, String shaderCode){

	        // create a vertex shader type (GLES20.GL_VERTEX_SHADER)
	        // or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)
	        int shader = GLES20.glCreateShader(type);

	        // add the source code to the shader and compile it
	        GLES20.glShaderSource(shader, shaderCode);
	        GLES20.glCompileShader(shader);

	        return shader;
	    }
	    
	    
	}
	
	public static class Shape {
		// number of coordinates per vertex in this array
	    static final int COORDS_PER_VERTEX = 3;
	    
	    private final String vertexShaderCode =
	            // This matrix member variable provides a hook to manipulate
	            // the coordinates of the objects that use this vertex shader
	            "uniform mat4 uMVPMatrix;" +
	            "attribute vec4 vPosition;" +
	            "void main() {" +
	            // the matrix must be included as a modifier of gl_Position
	            // Note that the uMVPMatrix factor *must be first* in order
	            // for the matrix multiplication product to be correct.
	            "  gl_Position = uMVPMatrix * vPosition;" +
	            "}";

	        // Use to access and set the view transformation

	    private final String fragmentShaderCode =
	            "precision mediump float;" +
	            "uniform vec4 vColor;" +
	            "void main() {" +
	            "  gl_FragColor = vColor;" +
	            "}";
	        
	    // Give coordinates in order: Top, Bottom left, Bottom right
		float coords[] = {};
		private FloatBuffer vertexBuffer;
		
		private final int mProgram;
		
		private int mPositionHandle;
	    private int mColorHandle;
	    private int mMVPMatrixHandle;

	    private final int vertexCount;
	    private final int vertexStride = COORDS_PER_VERTEX * 4; // 4 bytes per vertex
	    
	    protected ShortBuffer drawListBuffer;
		protected short drawOrder[];

	    // Set color with red, green, blue and alpha (opacity) values
	    float color[] = { 0.63671875f, 0.76953125f, 0.22265625f, 1.0f };

	    public Shape(float[] newCoords) {
	        // initialize vertex byte buffer for shape coordinates
	    	vertexCount = newCoords.length / COORDS_PER_VERTEX;
	    	coords = newCoords;
	        ByteBuffer bb = ByteBuffer.allocateDirect(
	                // (number of coordinate values * 4 bytes per float)
	                coords.length * 4);
	        // use the device hardware's native byte order
	        bb.order(ByteOrder.nativeOrder());

	        // create a floating point buffer from the ByteBuffer
	        vertexBuffer = bb.asFloatBuffer();
	        // add the coordinates to the FloatBuffer
	        vertexBuffer.put(coords);
	        // set the buffer to read the first coordinate
	        vertexBuffer.position(0);
	        
	        int vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,
                    vertexShaderCode);
			int fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,
			                    fragmentShaderCode);
			
			// create empty OpenGL ES Program
			mProgram = GLES20.glCreateProgram();
			
			// add the vertex shader to program
			GLES20.glAttachShader(mProgram, vertexShader);
			
			// add the fragment shader to program
			GLES20.glAttachShader(mProgram, fragmentShader);
			
			// creates OpenGL ES program executables
			GLES20.glLinkProgram(mProgram);
	    }
	    

	    public void draw(float[] mvpMatrix) {
	        // Add program to OpenGL ES environment
	        GLES20.glUseProgram(mProgram);

	        // get handle to vertex shader's vPosition member
	        mPositionHandle = GLES20.glGetAttribLocation(mProgram, "vPosition");

	        // Enable a handle to the triangle vertices
	        GLES20.glEnableVertexAttribArray(mPositionHandle);

	        // Prepare the triangle coordinate data
	        GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,
	                                     GLES20.GL_FLOAT, false,
	                                     vertexStride, vertexBuffer);

	        // get handle to fragment shader's vColor member
	        mColorHandle = GLES20.glGetUniformLocation(mProgram, "vColor");

	        // Set color for drawing the triangle
	        GLES20.glUniform4fv(mColorHandle, 1, color, 0);
	        
	        // get handle to shape's transformation matrix
	        mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVPMatrix");

	        // Pass the projection and view transformation to the shader
	        GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mvpMatrix, 0);


	        // Draw the triangle
	        GLES20.glDrawElements(GLES20.GL_TRIANGLES, drawOrder.length,
                    GLES20.GL_UNSIGNED_SHORT, drawListBuffer);

	        // Disable vertex array
	        GLES20.glDisableVertexAttribArray(mPositionHandle);
	    }
	    
	    void setColor(float[] color) {
	    	this.color = color;
	    }
	}
	
	public static class Triangle extends Shape {
		
	    public Triangle(float[] coords) {
	        super(setup(coords));
	        
	        drawOrder = new short[] { 0, 1, 2 };
	        
	        ByteBuffer dlb = ByteBuffer.allocateDirect(
            // (# of coordinate values * 2 bytes per short)
                    drawOrder.length * 2);
            dlb.order(ByteOrder.nativeOrder());
            drawListBuffer = dlb.asShortBuffer();
            drawListBuffer.put(drawOrder);
            drawListBuffer.position(0);
	    }
	    
	    public static float[] setup (float[] coords) {
	    	if (coords.length != 9)
	    		return new float[0];
	    	
	    	return coords;
	    }
	}
	
	public static class Quadrangle extends Shape {
	    public Quadrangle(float[] coords) {
	        super(setup(coords));
	        
	        drawOrder = new short[] { 0, 1, 2, 0, 2, 3 };
	        
	        ByteBuffer dlb = ByteBuffer.allocateDirect(
            // (# of coordinate values * 2 bytes per short)
                    drawOrder.length * 2);
            dlb.order(ByteOrder.nativeOrder());
            drawListBuffer = dlb.asShortBuffer();
            drawListBuffer.put(drawOrder);
            drawListBuffer.position(0);
	    }
	    
	    public static float[] setup (float[] coords) {
	    	if (coords.length != 12)
	    		return new float[0];
	    	
	    	return coords;
	    }
	}
	
	/*public static class Sprite {
		public double[] position = {0.0, 0.0};
		public Bitmap bitmap;
		public int[] arrayDim;
		public int[] spriteDim;
		
		public Sprite(Bitmap bitmap, int[] arrayDim) {
			this.bitmap = bitmap;
			this.arrayDim = arrayDim;
			this.spriteDim = new int[] { bitmap.getWidth() / arrayDim[0],
									     bitmap.getHeight() / arrayDim[1] };
		}
		
		public void draw(Canvas canvas, Paint paint) {
			Rect src = new Rect(0, 0, spriteDim[0], spriteDim[1]);
			Rect dest = new Rect((int) position[0] - spriteDim[0] / 2, (int) position[1] - spriteDim[1] / 2,
								 (int) position[0] + spriteDim[0] / 2, (int) position[1] + spriteDim[1] / 2);
			canvas.drawBitmap(this.bitmap, src, dest, paint);
		}
		
		public void draw(Canvas canvas, Rect src, Rect dest, Paint paint) {
			canvas.drawBitmap(this.bitmap, src, dest, paint);
		}
	}
	
	public static class RoomSprite extends Sprite{
		public int color;
		
		public RoomSprite(Bitmap bitmap) {
			super(bitmap, new int[] {1, 1});
		}
		
		public void setColor(int color) {
			this.color = color;
		}
		
		// Translate by the width or height in a direction
		public void directionTranslate(int direction, int width, int height) {
			
			switch (direction) {
				case 0:
					position = new double[] {position[0] - width, position[1]};
					break;
				case 1:
					position = new double[] {position[0], position[1] - height};
					break;
				case 2:
					position = new double[] {position[0] + width, position[1]};
					break;
				case 3:
					position = new double[] {position[0], position[1] + height};
					break;
				default:
					break;
			}
		}
	}
	
	public static class DoorSprite extends Sprite{
		public int direction;
		
		public DoorSprite(Bitmap bitmap) {
			super(bitmap, new int[] {1, 1});
		}
		
		public void setDirection(int direction) {
			this.direction = direction;
		}
	}

	public static class PlayerSprite extends Sprite{
		public double[] velocity = {0.0, 0.0};
		public double maxSpeed = 10.0;
		public int walkDuration = 2;
		public double acceleration = 10.0;
		public double deceleration = -1.0;
		public double[] accelerationVector = {0.0, 0.0};
		public int currentFrame = walkDuration - 1;
		public int col = 1;
		public int row = 0;
		public MemoryView memoryView;
		
		public PlayerSprite(Bitmap bitmap, int[] arrayDim, MemoryView memoryView) {
			super(bitmap, arrayDim);
			this.memoryView = memoryView;
		}
		
		public void adjustMaxSpeed(double maxSpeed) {
			this.maxSpeed = maxSpeed;
		}
		
		public void update() {
			if (memoryView.mainActivity.inTransition) {
				double totalAcceleration = acceleration + deceleration;
				if (totalAcceleration < 0) {
					double potentialVelocityX = (double) (velocity[0] + accelerationVector[0] * totalAcceleration);
					velocity[0] = velocity[0] < 0 ?
								  Math.min(0, potentialVelocityX) :
								  Math.max(0, potentialVelocityX);
					double potentialVelocityY = (double) (velocity[1] + accelerationVector[1] * totalAcceleration);
					velocity[1] = velocity[1] < 0 ?
								  Math.min(0, potentialVelocityY) :
								  Math.max(0, potentialVelocityY);	
				}
				else {
					velocity[0] = (double) (velocity[0] + accelerationVector[0] * totalAcceleration);
					velocity[1] = (double) (velocity[1] + accelerationVector[1] * totalAcceleration);
				}
				
				double speed = Math.sqrt(Math.pow(velocity[0], 2) + Math.pow(velocity[1], 2));
				if (speed > maxSpeed) {
					velocity[0] = velocity[0] * maxSpeed / speed;
					velocity[1] = velocity[1] * maxSpeed / speed;
				}
				
				position[0] += velocity[0];
				position[1] += velocity[1];
				currentFrame += 1;
				
				if (velocity[0] == 0 && velocity[1] == 0) {
					col = 1;
				}
				else {
					col = (currentFrame / walkDuration) % arrayDim[0];
				}
				
				if (Math.abs(velocity[0]) > Math.abs(velocity[1])) {
					if (velocity[0] >= 0)
						row = 2;
					else
						row = 1;
				}
				else {
					if (velocity[1] >= 0)
						row = 0;
					else
						row = 3;
				}
			}
			else if (memoryView.mainActivity.inBlur) {
				velocity[0] = (double) (accelerationVector[0] * maxSpeed);
				velocity[1] = (double) (accelerationVector[1] * maxSpeed);
				
				position[0] += velocity[0];
				position[1] += velocity[1];
				currentFrame += 1;
				
				if (velocity[0] == 0 && velocity[1] == 0) {
					col = 1;
				}
				else {
					col = (currentFrame / walkDuration) % arrayDim[0];
				}
				
				if (Math.abs(velocity[0]) > Math.abs(velocity[1])) {
					if (velocity[0] >= 0)
						row = 2;
					else
						row = 1;
				}
				else {
					if (velocity[1] >= 0)
						row = 0;
					else
						row = 3;
				}
			}
			
			if (velocity[0] == 0 && velocity[1] == 0) {
				col = 1;
			}
		}
		
		public void draw(Canvas canvas) {
			this.update();
			
			Rect src = new Rect(col * spriteDim[0], row * spriteDim[1],
								(col + 1) * spriteDim[0], (row + 1) * spriteDim[1]);
			Rect dest = new Rect((int) position[0] - spriteDim[0] / 2, (int) position[1] - spriteDim[1] / 2,
								 (int) position[0] + spriteDim[0] / 2, (int) position[1] + spriteDim[1] / 2);
			super.draw(canvas, src, dest, null);
		}
	}*/
}
























package com.example.memorymockup;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.opengl.GLUtils;
import android.opengl.Matrix;
import android.os.SystemClock;
import android.util.Log;


// OPENGL POSITIVE Z AXIS COMES OUT OF THE SCREEN
public class DrawUtility {
	
	public static int loadTexture(final Context context, final int resourceId)
	{
	    final int[] textureHandle = new int[1];
	 
	    GLES20.glGenTextures(1, textureHandle, 0);
	 
	    if (textureHandle[0] != 0)
	    {
	        final BitmapFactory.Options options = new BitmapFactory.Options();
	        //options.inScaled = false;   // No pre-scaling
	 
	        // Read in the resource
	        final Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), resourceId, options);
	 
	        // Bind to the texture in OpenGL
	        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureHandle[0]);
	 
	        // Set filtering
	        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);
	        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);
	 
	        // Load the bitmap into the bound texture.
	        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bitmap, 0);
	 
	        // Recycle the bitmap, since its data has been loaded into OpenGL.
	        bitmap.recycle();
	    }
	 
	    if (textureHandle[0] == 0)
	    {
	        throw new RuntimeException("Error loading texture.");
	    }
	 
	    return textureHandle[0];
	}
	
	
	public static class MyGLRenderer implements GLSurfaceView.Renderer {
		
		//public List<Shape> currentShapes = new ArrayList<Shape> ();
		
		public static float ROOM_SIZE = 2f;

		public MainActivity mainActivity;
		
		private Shape[] roomSprites;
		private Shape[] nextRoomSprites;
		private Shape[] doorSprites;
		
		// Position and velocity for camera
		public float[] position;
		public float[] velocity;
		
		private float currentTime;
		private float lastFrameTime;
		
		private final float[] mMVPMatrix = new float[16];
		private final float[] mProjectionMatrix = new float[16];
		private final float[] mViewMatrix = new float[16];
		
		private final float[] mTotalMatrix = new float[16];
		private final float[] mTransformMatrix = new float[16];
		
		

		public void onSurfaceCreated(GL10 unused, EGLConfig config) {
	        // Set the background frame color
	        GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	        
	        //Initialize assets for drawing rooms
	        roomSprites = new Shape [] {new Quadrangle( new float[] {
				-1f, -1f, -1f,
				-1f, -1f, 1f,
				1f, -1f, 1f,
				1f, -1f, -1f
	        })};
	        doorSprites = new Shape [] {
	        	new Quadrangle( new float[] {
					-1f, 1f, -0.25f,
					-1f, -1f, -0.25f,
					-1f, -1f, 0.25f,
					-1f, 1f, 0.25f
		        }),
		        new Quadrangle( new float[] {
						-0.5f, 1f, 1f,
						-0.5f, -1f, 1f,
						0.5f, -1f, 1f,
						0.5f, 1f, 1f
			    }),
			    new Quadrangle( new float[] {
						1f, 1f, 0.25f,
						1f, -1f, 0.25f,
						1f, -1f, -0.25f,
						1f, 1f, -0.25f
			    }),
			    new Quadrangle( new float[] {
			    		0.5f, 1f, -1f,
						0.5f, -1f, -1f,
						-0.5f, -1f, -1f,
						-0.5f, 1f, -1f
			    })};
	        for (int i = 0; i < doorSprites.length; i++)
	        	doorSprites[i].color = new float [] { 0.8f, 0.7f, 0.55f, 1.0f };
	        
	        velocity = new float [] { 0, 0, 0 };
	        position = new float [] { 0, 0, 0 };
	        
	        lastFrameTime = ((float) SystemClock.uptimeMillis() / 1000);
	    }

	    public void onDrawFrame(GL10 unused) {
	    	//Log.e("e", Float.toString(velocity[0]));
	    	
	    	// Get time passed since last frame
	    	currentTime = ((float) SystemClock.uptimeMillis() / 1000);
	    	float deltaTime = currentTime - lastFrameTime;
	    	lastFrameTime = currentTime;
	    	
	        // Redraw background color
	        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
	        
	        // Set the camera position (View matrix)
	        position = new float [] { position[0] + velocity[0] * deltaTime,
	        						  position[1] + velocity[1] * deltaTime,
	        						  position[2] + velocity[2] * deltaTime };
	        
	        if (Math.abs(position[0]) >= 2 || Math.abs(position[2]) >= 2)
	        {
	        	position = new float [] { 0, 0, 0 };
	        	velocity = new float [] { 0, 0, 0 };
	        	mainActivity.inBlur = false;
	        	
	        }
	        
	        //Log.e("e", Float.toString(position[0]));
	        //Log.e("e", Float.toString(z));
	        Matrix.setLookAtM(mViewMatrix, 0,
	        				  position[0], position[1], position[2] + 1,
	        				  position[0], position[1], position[2],
	        				  0f, 1.0f, 0.0f);

	        // Calculate the projection and view transformation
	        Matrix.multiplyMM(mMVPMatrix, 0, mProjectionMatrix, 0, mViewMatrix, 0);
	        
	        //Log.e("eee", Integer.toString(currentShapes.size()));
	        for (int i = 0; i < roomSprites.length; i++)
	        	roomSprites[i].draw(mMVPMatrix);
	        
	        
	        for (int i = 0; i < doorSprites.length; i++)
	        	doorSprites[i].draw(mMVPMatrix);
	        
	        if (mainActivity.inBlur) {
		        // Calculate the projection and view transformation
	        	Matrix.setIdentityM(mTransformMatrix, 0);
	        	
	        	int previousMove = mainActivity.memoryView.previousMove;
	        	switch(previousMove) {
	        		case 0:
	        			Matrix.translateM(mTransformMatrix, 0, -2, 0, 0);
	        			break;
	        		case 1:
	        			Matrix.translateM(mTransformMatrix, 0, 0, 0, -2);
	        			break;
	        		case 2:
	        			Matrix.translateM(mTransformMatrix, 0, 2, 0, 0);
	        			break;
	        		case 3:
	        			Matrix.translateM(mTransformMatrix, 0, 0, 0, 2);
	        			break;
	        	}
		        Matrix.multiplyMM(mMVPMatrix, 0, mProjectionMatrix, 0, mViewMatrix, 0);
		        Matrix.multiplyMM(mTotalMatrix, 0, mMVPMatrix, 0, mTransformMatrix, 0);
		        
		        for (int i = 0; i < roomSprites.length; i++)
		        	roomSprites[i].draw(mTotalMatrix);
		        
		        for (int i = 0; i < doorSprites.length; i++)
		        	doorSprites[i].draw(mTotalMatrix);
	        }
	    }

	    public void onSurfaceChanged(GL10 unused, int width, int height) {
	    	GLES20.glViewport(0, 0, width, height);

    	    float ratio = (float) width / height;

    	    // this projection matrix is applied to object coordinates
    	    // in the onDrawFrame() method
    	    Matrix.frustumM(mProjectionMatrix, 0, -ratio, ratio, -1, 1, 0.5f, 7);
	    }
	    
	    public static int loadShader(int type, String shaderCode){

	        // create a vertex shader type (GLES20.GL_VERTEX_SHADER)
	        // or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)
	        int shader = GLES20.glCreateShader(type);

	        // add the source code to the shader and compile it
	        GLES20.glShaderSource(shader, shaderCode);
	        GLES20.glCompileShader(shader);

	        return shader;
	    }
	    
	    
	}
	
	public static class Shape {
		// number of coordinates per vertex in this array
	    static final int COORDS_PER_VERTEX = 3;
	    
	    private final String vertexShaderCode =
	            // This matrix member variable provides a hook to manipulate
	            // the coordinates of the objects that use this vertex shader
	            "uniform mat4 uMVPMatrix;" +
	            "attribute vec4 vPosition;" +
	            "void main() {" +
	            // the matrix must be included as a modifier of gl_Position
	            // Note that the uMVPMatrix factor *must be first* in order
	            // for the matrix multiplication product to be correct.
	            "  gl_Position = uMVPMatrix * vPosition;" +
	            "}";

	        // Use to access and set the view transformation

	    private final String fragmentShaderCode =
	            "precision mediump float;" +
	            "uniform vec4 vColor;" +
	            "void main() {" +
	            "  gl_FragColor = vColor;" +
	            "}";
	        
	    // Give coordinates in order: Top, Bottom left, Bottom right
		float coords[] = {};
		private FloatBuffer vertexBuffer;
		
		private final int mProgram;
		
		private int mPositionHandle;
	    private int mColorHandle;
	    private int mMVPMatrixHandle;

	    private final int vertexCount;
	    private final int vertexStride = COORDS_PER_VERTEX * 4; // 4 bytes per vertex
	    
	    protected ShortBuffer drawListBuffer;
		protected short drawOrder[];

	    // Set color with red, green, blue and alpha (opacity) values
	    float color[] = { 0.63671875f, 0.76953125f, 0.22265625f, 1.0f };

	    public Shape(float[] newCoords) {
	        // initialize vertex byte buffer for shape coordinates
	    	vertexCount = newCoords.length / COORDS_PER_VERTEX;
	    	coords = newCoords;
	        ByteBuffer bb = ByteBuffer.allocateDirect(
	                // (number of coordinate values * 4 bytes per float)
	                coords.length * 4);
	        // use the device hardware's native byte order
	        bb.order(ByteOrder.nativeOrder());

	        // create a floating point buffer from the ByteBuffer
	        vertexBuffer = bb.asFloatBuffer();
	        // add the coordinates to the FloatBuffer
	        vertexBuffer.put(coords);
	        // set the buffer to read the first coordinate
	        vertexBuffer.position(0);
	        
	        int vertexShader = MyGLRenderer.loadShader(GLES20.GL_VERTEX_SHADER,
                    vertexShaderCode);
			int fragmentShader = MyGLRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER,
			                    fragmentShaderCode);
			
			// create empty OpenGL ES Program
			mProgram = GLES20.glCreateProgram();
			
			// add the vertex shader to program
			GLES20.glAttachShader(mProgram, vertexShader);
			
			// add the fragment shader to program
			GLES20.glAttachShader(mProgram, fragmentShader);
			
			// creates OpenGL ES program executables
			GLES20.glLinkProgram(mProgram);
	    }
	    

	    public void draw(float[] mvpMatrix) {
	        // Add program to OpenGL ES environment
	        GLES20.glUseProgram(mProgram);

	        // get handle to vertex shader's vPosition member
	        mPositionHandle = GLES20.glGetAttribLocation(mProgram, "vPosition");

	        // Enable a handle to the triangle vertices
	        GLES20.glEnableVertexAttribArray(mPositionHandle);

	        // Prepare the triangle coordinate data
	        GLES20.glVertexAttribPointer(mPositionHandle, COORDS_PER_VERTEX,
	                                     GLES20.GL_FLOAT, false,
	                                     vertexStride, vertexBuffer);

	        // get handle to fragment shader's vColor member
	        mColorHandle = GLES20.glGetUniformLocation(mProgram, "vColor");

	        // Set color for drawing the triangle
	        GLES20.glUniform4fv(mColorHandle, 1, color, 0);
	        
	        // get handle to shape's transformation matrix
	        mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVPMatrix");

	        // Pass the projection and view transformation to the shader
	        GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mvpMatrix, 0);


	        // Draw the triangle
	        GLES20.glDrawElements(GLES20.GL_TRIANGLES, drawOrder.length,
                    GLES20.GL_UNSIGNED_SHORT, drawListBuffer);

	        // Disable vertex array
	        GLES20.glDisableVertexAttribArray(mPositionHandle);
	    }
	    
	    void setColor(float[] color) {
	    	this.color = color;
	    }
	}
	
	public static class Triangle extends Shape {
		
	    public Triangle(float[] coords) {
	        super(setup(coords));
	        
	        drawOrder = new short[] { 0, 1, 2 };
	        
	        ByteBuffer dlb = ByteBuffer.allocateDirect(
            // (# of coordinate values * 2 bytes per short)
                    drawOrder.length * 2);
            dlb.order(ByteOrder.nativeOrder());
            drawListBuffer = dlb.asShortBuffer();
            drawListBuffer.put(drawOrder);
            drawListBuffer.position(0);
	    }
	    
	    public static float[] setup (float[] coords) {
	    	if (coords.length != 9)
	    		return new float[0];
	    	
	    	return coords;
	    }
	}
	
	public static class Quadrangle extends Shape {
	    public Quadrangle(float[] coords) {
	        super(setup(coords));
	        
	        drawOrder = new short[] { 0, 1, 2, 0, 2, 3 };
	        
	        ByteBuffer dlb = ByteBuffer.allocateDirect(
            // (# of coordinate values * 2 bytes per short)
                    drawOrder.length * 2);
            dlb.order(ByteOrder.nativeOrder());
            drawListBuffer = dlb.asShortBuffer();
            drawListBuffer.put(drawOrder);
            drawListBuffer.position(0);
	    }
	    
	    public static float[] setup (float[] coords) {
	    	if (coords.length != 12)
	    		return new float[0];
	    	
	    	return coords;
	    }
	}
}